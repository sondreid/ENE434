library(tidyverse)
library(fpp3)
library(kableExtra)
library(fGarch)
library(lubridate)
library(magrittr)
library(forecast)
library(dynlm)
library(fable)
library(tseries)
getwd()
ets = read_csv("http://jmaurit.github.io/analytics/labs/data/eua-price.csv") ## Carbon pricing data
colnames(ets) = c("date", "price")                                                # Change rownames
elspot = read_csv("http://jmaurit.github.io/norwayeconomy/data_series/elspot.csv") ##
ets["month"] = month(ets$date)
ets["year"] = year(ets$date)
ets_mon = ets %>% group_by(month, year) %>% summarise(
  price = mean(price))
ets_mon["day"] = 1
ets_mon = ets_mon %>% arrange(year, month)
ets_mon = ets_mon %>% mutate(date = make_date(year, month, day))
## Convert to monthly data
ets %<>% 
  mutate(month = month(date)) %>% 
  group_by(month) %>% 
  summarise(ets_mon = mean(price),
            year = year(date),
            month = month,
            day  = 1) %>%  
  ungroup() %>% 
  mutate(date = make_date(year, month, day ))
# Join carbon pricing data and 
power_df <- elspot %>% inner_join(ets_mon[c("price", "date")], by="date")
power_DK_df <- power_df %>% dplyr:: select(DK1, DK2, date, price)
## Scale to mwh
power_DK_df %<>% mutate(DK1 = DK1/1000,
                        DK2 = DK2/1000)
## Daily consumption data
cons = read_csv2("http://jmaurit.github.io/analytics/labs/data/consumption-per-country_2019_daily.csv")
cons["date"] = as.Date(cons$date, format="%d/%m/%Y")
cons_ts <- tsibble(cons, index=date)
```
## Task 1: Comparison of variance of consumption data in Norway and Denmark
```{r, echo = TRUE}
## Seasonal decompositon of Danish electricity consumption
cons_comp_dk = cons_ts %>% model(
  STL(DK ~ trend(window=7) + season(window="periodic"))
) %>% components 
cons_comp_dk %>%  autoplot()
cons_comp_dk = cons_ts %>% model(
  STL(DK ~ trend(window=7) + season(window="periodic"))
) %>% components 
cons_comp_no = cons_ts %>% model(
  STL(NO ~ trend(window=7) + season(window="periodic"))
) %>% components 
cons_comp_dk %>%  autoplot()
cons_comp_no %>%  autoplot()
fit_cons_dk %>% residuals() %>% autoplot()
fit_cons_dk %>% residuals() %>% autoplot()
```{r, echo = TRUE, include = TRUE}
forecast::ggtsdisplay(cons$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark ACF and PACF plots ") 
unitroot_kpss(cons$DK)
adf.test(cons$DK)
```
We perform a first order differencing and perform the same stationarity analysis.
```{r, echo = TRUE, include = TRUE}
# Perform differencing
cons_diff_dk <- cons %>% mutate(DK = difference(DK)) %>% filter(!is.na(DK))
cons_test <- cons %>% as_tsibble(index = date) # make test set
adf.test(cons_dk$DK) #Stationary
# New ACF and PACF plots
forecast::ggtsdisplay(cons_diff_dk$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark (difference) ACF and PACF plots ") 
```
We note that there are significant autocorrelations at the weekly lag (i.e 7, 14). Luckily the fable package correctly identified the seasonality as weekly, e.g an ARIMA PDQ pdq[7], regardless of the specific terms. 
We will now perform two forecasts, a manually specified ARIMA model and an automatically determined ARIMA model made by the fable ARIMA() function.
In the PACF plot we can see a clear autocorrelation in seasonal lag terms, in a decreasing fashion. This calls for an MA(1) term to applied to the seasonal component of the ARIMA model. 
```{r, echo = TRUE, include = TRUE}
fit_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_optimal =  ARIMA(DK, stepwise = FALSE, approximation = FALSE),
        arim_110101       = ARIMA(DK ~ pdq(1,1,0) + PDQ(1,0,1)))
fit_cons_dk
fit_cons_dk %>% residuals()
fit_cons_dk %>% residuals() %>% autoplot()
fit_cons_dk %>% residuals() %>% autoplot()Residuals <- residuals(fit_cons_dk)$.resid
Residuals <- residuals(fit_cons_dk)$.resid
Residuals
fit_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_optimal =  ARIMA(DK, stepwise = FALSE, approximation = FALSE),
        arim_110101       = ARIMA(DK ~ pdq(1,1,1) + PDQ(1,0,1)))
fit_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_optimal =  ARIMA(DK, stepwise = FALSE, approximation = FALSE),
        arim_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1)))
cons
library(tidyverse)
library(fpp3)
library(kableExtra)
library(fGarch)
library(lubridate)
library(magrittr)
library(forecast)
library(dynlm)
library(fable)
library(tseries)
```
```{r, echo = FALSE, include=FALSE}
### Data retrieval ##
ets = read_csv("http://jmaurit.github.io/analytics/labs/data/eua-price.csv") ## Carbon pricing data
colnames(ets) = c("date", "price")                                                # Change rownames
elspot = read_csv("http://jmaurit.github.io/norwayeconomy/data_series/elspot.csv") ##
ets["month"] = month(ets$date)
ets["year"] = year(ets$date)
ets_mon = ets %>% group_by(month, year) %>% summarise(
  price = mean(price))
ets_mon["day"] = 1
ets_mon = ets_mon %>% arrange(year, month)
ets_mon = ets_mon %>% mutate(date = make_date(year, month, day))
## Convert to monthly data
ets %<>% 
  mutate(month = month(date)) %>% 
  group_by(month) %>% 
  summarise(ets_mon = mean(price),
            year = year(date),
            month = month,
            day  = 1) %>%  
  ungroup() %>% 
  mutate(date = make_date(year, month, day ))
# Join carbon pricing data and 
power_df <- elspot %>% inner_join(ets_mon[c("price", "date")], by="date")
power_DK_df <- power_df %>% dplyr:: select(DK1, DK2, date, price)
## Scale to mwh
power_DK_df %<>% mutate(DK1 = DK1/1000,
                        DK2 = DK2/1000)
## Daily consumption data
cons = read_csv2("http://jmaurit.github.io/analytics/labs/data/consumption-per-country_2019_daily.csv")
cons["date"] = as.Date(cons$date, format="%d/%m/%Y")
cons_ts <- tsibble(cons, index=date)
```
## Task 1: Comparison of consumption data in Norway and Denmark
```{r, echo = TRUE}
## Seasonal decompositon of Danish electricity consumption
cons_comp_dk = cons_ts %>% model(
  STL(DK ~ trend(window=7) + season(window="periodic"))
) %>% components 
cons_comp_no = cons_ts %>% model(
  STL(NO ~ trend(window=7) + season(window="periodic"))
) %>% components 
cons_comp_dk %>%  autoplot()
cons_comp_no %>%  autoplot()
```
A clear assumption in an ARIMA forecasting model is the that the data is stationary in terms of its variance and mean. We plot the time series containing electricity consumption data, as well its autocorrelation and partial autocorrelation plots. 
We see clear signs of non-stationarity and perform unit root tests confirming the need for first order differencing. 
Some information contained in the data is lost by performing a differencing, but we conform the the assumption of stationarity of the data.
```{r, echo = TRUE, include = TRUE}
forecast::ggtsdisplay(cons$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark ACF and PACF plots ") 
unitroot_kpss(cons$DK)
adf.test(cons$DK)
```
We perform a first order differencing and perform the same stationarity analysis.
```{r, echo = TRUE, include = TRUE}
# Perform differencing
cons_diff_dk <- cons %>% mutate(DK = difference(DK)) %>% filter(!is.na(DK))
cons
adf.test(cons$DK)
cons_diff_dk <- cons %>% mutate(DK = difference(DK)) %>% filter(!is.na(DK))
cons_diff_dk <- cons %>% mutate(DK = difference(DK))
cons_diff_dk <- cons %>% mutate(DK = difference(DK)) %>% dplyr::filter(!is.na(DK))
cons_diff_dk <- cons %>% mutate(DK = difference(DK)) %>% dplyr::filter(!is.na(DK))
adf.test(cons_diff_dk$DK) #Stationary
forecast::ggtsdisplay(cons_diff_dk$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark (difference) ACF and PACF plots ") 
fit_arima_optimal_ cons_dk <- 
  cons %>% 
  as_tsibble(index = date) %>%  
  model(arima_optimal =  ARIMA(DK, stepwise = FALSE, approximation = FALSE)
)
fit_arima_manual_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_optimal =     ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,1,1)),
        arim_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1)))
fit_arima_manual_cons_dk
fit_arima_manual_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_111111 =     ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,1,1)),
        arima_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1)))
fit_arima_manual <- fit_cons_dk  %>%  filter(.model == "arima_111111")
# Residuals of manually selected ARIMA model
Residuals <- residuals(fit_arima_manual)$.resid
ggtsdisplay(Residuals, 
            plot.type = "histogram", 
            lag.max = 24, 
            theme = theme_bw(),
            main = "Residuals of manual ARIMA model")
fit_arima_optimal_cons_dk <- 
  cons %>% 
  as_tsibble(index = date) %>%  
  model(arima_optimal =  ARIMA(DK, stepwise = FALSE, approximation = FALSE))
fit_cons_dk  <-  fit_arima_manual_cons_dk  %>% bind_rows(fit_arima_optimal_cons_dk)
fit_arima_optimal_cons_dk
fit_cons_dk  <-  fit_arima_manual_cons_dk  %>% bind_cols(fit_arima_optimal_cons_dk)
fit_cons_dk
fc_cons_dk <-  fit_cons_dk %>% forecast(h = 30)
fc_cons_dk
fc_cons_dk  %>% ggplot() +
  geom_line(aes(x = date, y = .mean, color = .model)
fc_cons_dk  %>% ggplot() +
  geom_line(aes(x = date, y = .mean, color = .model)) 
fc_cons_dk  %>% ggplot() +
  geom_line(aes(x = date, y = .mean, color = .model)) 
cons
fit_cons_dk %>%  accuracy()  %>%   
  rename("Model" = .model) %>% 
  kbl(caption = "Training data performance metrics: Danish power consumption") %>%
  kable_classic(full_width = F, html_font = "Times new roman")
forecast::ggtsdisplay(cons_diff_dk$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark (difference) ACF and PACF plots ") 
fit_arima_optimal_cons_dk
forecast::ggtsdisplay(cons$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark ACF and PACF plots ") 
forecast::ggtsdisplay(cons$DK, plot_type='partial',
                      lag.max = 24, 
                      theme = theme_bw(),
                      main = "Elecitricity consumption in Denmark ACF and PACF plots ") 
cons_diff_dk <- cons %>% mutate(DK = difference(DK,7)) %>% dplyr::filter(!is.na(DK)) #Take first order difference
adf.test(cons_diff_dk$DK) #Stationary
adf.test(cons_diff_dk$DK) #Stationary
unitroot_kpss(cons_diff_dk$DK)
unitroot_kpss(cons_diff_dk$DK)
adf.test(cons_diff_dk$DK) #Stationary
adf.test(cons$DK)
unitroot_kpss(cons$DK)
fc_cons_dk  %>% ggplot() +
  geom_line(aes(x = date, y = .mean, color = .model)) +
  geom_line(aes(x  = date, y = DK), data = cons)
fit_arima_manual_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_111111       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,1,1)),
        arima_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1),
        arima_101111       = ARIMA(DK ~ 0 + pdq(1,0,1) + PDQ(1,1,1))))
fit_cons_dk  <-  fit_arima_manual_cons_dk  %>% bind_cols(fit_arima_optimal_cons_dk)
fit_cons_dk %>%  accuracy()  %>%   
  rename("Model" = .model) %>% 
  kbl(caption = "Training data performance metrics: Danish power consumption") %>%
  kable_classic(full_width = F, html_font = "Times new roman")
fit_arima_manual_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_111111       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,1,1)),
        arima_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1),
        arima_101111       = ARIMA(DK ~ 0 + pdq(1,0,1) + PDQ(1,1,1))))
fit_arima_manual_cons_dk <- cons %>% as_tsibble(index = date) %>%  
  model(arima_111111       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,1,1)),
        arima_110101       = ARIMA(DK ~ 0 + pdq(1,1,1) + PDQ(1,0,1)),
        arima_101111       = ARIMA(DK ~ 0 + pdq(1,0,1) + PDQ(1,1,1)))
fit_cons_dk  <-  fit_arima_manual_cons_dk  %>% bind_cols(fit_arima_optimal_cons_dk)
fit_cons_dk %>%  accuracy()  %>%   
  rename("Model" = .model) %>% 
  kbl(caption = "Training data performance metrics: Danish power consumption") %>%
  kable_classic(full_width = F, html_font = "Times new roman")
fit_arima_optimal_cons_dk 
